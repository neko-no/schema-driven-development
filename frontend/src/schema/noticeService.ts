/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Notice Service
 * OpenAPI spec version: 0.0.0
 */
import axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export type BadRequestErrorCode = typeof BadRequestErrorCode[keyof typeof BadRequestErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BadRequestErrorCode = {
  BAD_REQUEST: 'BAD_REQUEST',
} as const;

export interface BadRequestError {
  code: BadRequestErrorCode;
  message: string;
}

export type InternalServerErrorCode = typeof InternalServerErrorCode[keyof typeof InternalServerErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InternalServerErrorCode = {
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR',
} as const;

export interface InternalServerError {
  code: InternalServerErrorCode;
  message: string;
}

export type NotFoundErrorCode = typeof NotFoundErrorCode[keyof typeof NotFoundErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotFoundErrorCode = {
  NOT_FOUND: 'NOT_FOUND',
} as const;

export interface NotFoundError {
  code: NotFoundErrorCode;
  message: string;
}

export interface Notice {
  id: number;
  title: string;
  content: string;
  released_at: string;
  created_at: string;
  updated_at: string;
}

export interface SDDServiceValidationErrorResponse {
  /** The body type of the operation request or response. */
  body: ValidationError;
}

export type ValidationErrorCode = typeof ValidationErrorCode[keyof typeof ValidationErrorCode];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationErrorCode = {
  VALIDATION_ERROR: 'VALIDATION_ERROR',
} as const;

export interface ValidationError {
  code: ValidationErrorCode;
  message: string;
  date: string[];
}

export type NoticesServiceGetNoticesParams = {
page?: number;
limit?: number;
};

/**
 * Get all notices
 * @summary Retrive all notices
 */
export const noticesServiceGetNotices = <TData = AxiosResponse<Notice[]>>(
    params?: NoticesServiceGetNoticesParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/notices`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get a specific notice by ID
 * @summary Retrice a notice by ID
 */
export const noticesServiceGetNotice = <TData = AxiosResponse<Notice>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.get(
      `/notices/${id}`,options
    );
  }

export type NoticesServiceGetNoticesResult = AxiosResponse<Notice[]>
export type NoticesServiceGetNoticeResult = AxiosResponse<Notice>
