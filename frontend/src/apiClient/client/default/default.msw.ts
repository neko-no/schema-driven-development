/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Notice Service
 * OpenAPI spec version: 0.0.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  Notice
} from '../../schema';


export const getNoticesServiceGetNoticesResponseMock = (): Notice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.number.int({min: undefined, max: undefined}), title: faker.string.alpha({length: {min: 10, max: 20}}), content: faker.string.alpha({length: {min: 10, max: 20}}), released_at: faker.date.past().toISOString().split('T')[0], created_at: `${faker.date.past().toISOString().split('.')[0]}Z`, updated_at: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getNoticesServiceGetNoticeResponseMock = (): Notice => ({"id":1,"title":"Notice Title","content":"Notice Content","released_at":"2025-08-10T00:00:00Z","created_at":"2025-08-10T00:00:00Z","updated_at":"2025-08-10T00:00:00Z"})


export const getNoticesServiceGetNoticesMockHandler = (overrideResponse?: Notice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Notice[]> | Notice[])) => {
  return http.get('http://localhost:3000/notices', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getNoticesServiceGetNoticesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getNoticesServiceGetNoticeMockHandler = (overrideResponse?: Notice | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<Notice> | Notice)) => {
  return http.get('http://localhost:3000/notices/:id', async (info) => {await delay(1000);

    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getNoticesServiceGetNoticeResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getDefaultMock = () => [
  getNoticesServiceGetNoticesMockHandler(),
  getNoticesServiceGetNoticeMockHandler()
]
